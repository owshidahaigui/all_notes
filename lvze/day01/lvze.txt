1.  python2 和 python3 差异

    * python3 语法上还是规范上优于python2

    * 函数差异

      print  
      python2 中是关键字   print "hello world"
      python3 中是函数      	

      input
      python2 中有 input() 和 raw_input()
      python3 中只有input()

      range
      python2 中有range得到列表  xrange得到迭代器
      python3 中只有range 得到一个迭代器

      python3中内建函数多了一些，super()

    * 编码格式的差异

      python2 默认编码格式是ascii 
      如果使用中文需加： #! coding=utf-8 
                         #! -*- coding=utf-8 -*-

      python3 默认编码为utf-8,并且python3 中引入字节串

    * 运算修改

      python2   中  3 / 2 =》1 3.0 / 2 => 1.5,
                地板除方法与python3相同
      python3  中废除了<>这种不等于

    * 数据类型差异

      python3中引入字节串
      python3 废除了python2 中的long类型，python3中只有int相当于python2的long

    * 关键字修改

      python3 将True False变为关键字

      引入了nonlocal关键字

    * 语法变化

      异常 ：python2中异常和异常对象逗号分开
             except Exception ,e

      python2中 tab和四个空格等价

      python3 引入了协程等语法规则

    * 库的变化

      * 标准库库名根符合pep8 
        SocketServer --》 socketserver

2.  深拷贝，浅拷贝
    
    * 对于不可变类型，浅拷贝复制的是地址指向，不开辟新空间
    * 对于可变类型，浅拷贝会复制开辟新的空间，但是只复制最顶层空间内容
    * 浅拷贝后，改变一个对象中可变类型的值，另外一个对象也受影响，改变一个对象中不可变类型的值，另一个不受影响
    * 深拷其实是浅拷贝的递归做法，拷贝后，所有内容均被拷贝，相互不影响

3.  python是一个什么样的编程语言
    
    面向对象 

        机器语言 -> 汇编语言（低级语言） -> 高级语言（面向对象，面向过程） 

        面向过程 ： 以步骤（语句）为核心
        面向对象 ： 以数据为核心

    解释型语言

        编译型 ：有先编译的过程 -》（目标文件）
        解释型 : 靠解释器直接解释执行
        半编译半解释

    脚本语言 

        语法简单，用它做在自动化，或者辅助程序中使用

    动态语言 

        动态语言 ： 在标识符的赋值上不体现类型，具体类型根据赋的值而定。

        静态语言 ： 在定义标识符的时候直接需要指明标识符类型，并且不能改变。静态语言往往可以提前开辟空间，所以效率较高  
    
    强类型

        强类型：不允许变量在运算或者语句操作过程中隐式的进行类型转换

        弱类型：允许变量在执行中隐式的转换类型

4.  装饰器 （语法糖）
    
    函数 装饰 类
    函数 装饰 函数  （最常用）
    类 装饰 类
    类 装饰 函数

    闭包 ： 引用了自由变量的函数，自由变量会与函数同在，即使已经离开了创造他们的环境

    装饰的函数为固定参数

    装饰的函数为不定参数

    装饰器带参数

5.  类中的魔法方法 （ 前后有双下划线 __fun__() ）

6.  静态方法，类方法，多继承规则，元类
    
    * 类方法和静态方法都可以使用类和实例对象调用，但是更希望通过类直接调用

    * 类方法和静态方法是伴随类的加载加载的

    * 静态方法更多些类的独立的逻辑部分

    * 类方法多一个cls，更方便对类的属性修改，和继承中差异化处理

    * 应该尽量避免多继承，如果多继承出现，遵循mro算法的继承优先级关系

    * 元类 type : 创建类的类
