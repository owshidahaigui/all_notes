一、CSS文本属性
	1.字体相关
		1)font-size
		2)font-weight:设置字体粗细程度，取bold/normal；或者取整百数值表示粗细程度100~900，400等价于normal，700等价于bold
		3)font-style:设置斜体，取italic
		4)font-family:设置字体名称。如果字体名称为中文或出现空格，必须使用引号；可以取多个值设置备用字体，属性值之间使用逗号隔开。
		5)简写属性：
			font:style weight size family;
			注意：简写属性中，size和family是必填项
	2.文本相关
		1)color
		2)text-decoration:设置文本装饰线，可取：
			underline	下划线
			overline	上划线
			line-through	删除线
			none	取消装饰线
			注意：装饰线紧贴文本显示，颜色与文本色一致
		3)text-align:设置文本的水平对齐方式，默认居左。可取：left/center/right/justify(两端对齐)
		4)line-height：设置行高，文本在当前行中一定是垂直居中。可以设置行高跟元素高度保持一致，实现一行文本在元素中的垂直居中效果。可以取像素值或无单位的数值（表示字体大小的倍数，以此计算行高）
	
二、JavaScript介绍
	1.简称JS，是一种浏览器解释型语言，嵌入到网页中由浏览器负责解析和执行。可以实现网页动态效果，用户交互，实现网络请求或游戏制作。
	2.组成
		1）核心语法（ECMAScript 5）
		2）BOM（浏览器对象模型），提供操作浏览器窗口的方法
		3）DOM（文档对象模型），提供操作HTML文档的方法
三、JS使用
	1.元素绑定事件
		事件：用户的行为或元素的状态
		事件处理：元素监听到事件发生后作出的响应
		事件名称：
			onclick（单击事件）ondblclick(双击事件)
		语法：
			将事件名称以标签属性的形式绑定到元素上
			<h1 onclick="JS代码"></h1>
	2.内嵌方式
		使用<script type="text/javascript"></script>书写JS语句。
		例：
			<script>
				//JS语句
			
			</script>
		标签可以书写在任意位置，书写任意多次。浏览器在解析到script标签时会直接执行内部的脚本代码。
	3.外链方式
		创建外部的JS文件（.js）,HTML文件中使用<script src=""></script>引入.注意<script>既可以实现内嵌，也可以实现外链，但是二选一。
	4.语法规范
		1）JS代码区分大小写
		2）JS语句可以使用;作为结束的标志，也可以省略
			alert();
			alert()
		3）JS中注释
			//单行注释
			/*多行注释*/
	5.输入语句
		console.log()	控制台输出
		alert("")	网页警告框
		prompt("")	带输入框的弹框
		document.write("")	在网页中输出，动态向body标签中写入内容，可以识别标签语法
			使用：
				1.代码的书写位置即为添加位置
				2.使用元素绑定事件的方式去动态添加，会造成页面重写。（事件发生之前，body可能就加载完毕了）
四、JS基础语法
	1.变量与常量
		1）变量
			1.用于存储在程序运行过程中随时可以修改的数据
			2.使用var关键字声明变量
			3.注意：
				1）变量声明未赋值时，默认为undefined
				2）未声明未赋值会报错
				3）声明变量时可以省略关键字，影响作用域。
		2）常量
			1.一经定义就不能修改的数据
			2.使用const关键字声明常量，通常，常量名采用全大写字母表示
			命名规范：
				自定义变量名，常量名，函数名或对象名时，可以由数字，字母下划线和$组成，不允许以数字开头，不能与关键字冲突，尽量见名知意。多个单词组成时采用小驼峰表示。
	2.数据类型
		1）简单数据类型（值类型）
			1.number
				整数：可以使用十进制，八进制或十六进制表示
			2.string
				字符串使用引号表示，会自动为每一位字符分配下标；每位字符都有自身的Unicode编码
			3.boolean
				布尔值，只有true/false
			4.undefined
				变量声明未赋值时默认为undefined
			5.null
				空值，解除对象引用
		2）引用类型
			主要指对象（函数，内置类型，自定义的对象）

		3）检测数据类型
			typeof num;
			typeof (num);
	3.数据类型转换
		1）强制类型转换
			1.转换字符串
				toString()，返回转换后的结果
			2.转换number
				1)Number(n),将变量n转换为number值，返回转换后的结果，如果变量中存在非number字符，一律转换失败,返回NaN(Not a Number)
				2)parseInt(n)/parseFloat(n)
				解析number部分。过程：
				如果参数为非字符串，将自动转换成字符串，逐位进行解析，对每一位字符进行转Number的操作，一旦解析失败，就停止向后解析，返回结果
			3.转换布尔值
				Boolean(n)将变量转换布尔值：
				除"零"值以外，所有值都为真.
				“零”值：0/0.0/""/undefined/NaN/null

		2）自动类型转换
			1.字符串与其他数据类型进行"+"运算，一律为字符串拼接。将非字符串数据自动转换为字符串进行拼接。
			2.其他情况下，一律自动转换为number参与数学运算
	4.运算符
		1）赋值运算符 =
		2）数学运算符
			+ - * / %(取余)
		3）复合运算符
			+= -= *= /= %=
		4）自增或自减运算符 ++ --
			在变量自身值的基础上加1或-1
			使用：
				1.单独与变量结合，做前缀或做后缀没有区别
				2.与其他运算符结合使用时，前缀和后缀有区分，前缀就先++/--,后缀就后++/--
			思考：
				var n = 5;
				var r = n++ + ++n + n++ + ++n + n;
				r = ? n = ?
				解：
					var r1 = n++;//5 6
					var r2 = ++n;//7 7
					var r3 = n++;//7 8
					var r4 = ++n;//9 9
					var r5 = n;//9
		5）比较运算符/关系运算
			> >= < <= ==(相等) !=(不等) ===(全等) !==
			1.关系运算的结果一定是布尔值
			2.运算规则：
				1）字符串与字符串之间的比较，逐位比较字符的Unicode编码
				2）其他情况下一律转换number进行比较，如果转换失败，变成NAN参与关系运算，结果一律为false
			3.相等与全等
				相等：包含自动类型转换，只要值相等，就成立
				全等：严格比较，不会转换类型。要求类型一致并且值相等才成立
	
	


			

				


	
	

		















